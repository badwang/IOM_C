=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "AS1"       (component AsynchroSerial)
   - AS1_Enable -Enables the component - it starts the send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent").
   - AS1_Disable -Disables the component - it stops the send and receive functions. No events will be generated.
   - AS1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - AS1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS1_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters.
   - AS1_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the output 
                buffer is defined and the transmitter property is enabled.
   - AS1_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - AS1_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - AS1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "Din"       (component BitsIO)
   - Din_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of the 
                pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> property 
                for limitations).
   - Din_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] then it 
                reads the input value of the pin and returns it. If the direction is [output] then it returns the last written 
                value (see <Safe mode> property for limitations).

Module "Din2"      (component BitsIO)
   - Din2_GetDir -Return selected direction.
   - Din2_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of 
                the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).
   - Din2_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] then it 
                reads the input value of the pin and returns it. If the direction is [output] then it returns the last written 
                value (see <Safe mode> property for limitations).

Module "Dout"      (component BitsIO)
   - Dout_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of 
                the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).
   - Dout_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value to a 
                memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - Dout_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] then it 
                reads the input value of the pin and returns it. If the direction is [output] then it returns the last written 
                value (see <Safe mode> property for limitations).
   - Dout_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. If the direction is [input] 
                it saves the value to a memory or register, this value will be written to the pin after switching to the output 
                mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes 
                the value to the pin. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - Dout_SetBit -Sets (to one) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, TRUE)]. (Method 
                is available only if the Direction = _[output]_ or _[input/output]_).
   - Dout_ClrBit -Clears (sets to zero) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, FALSE)].
                (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - Dout_NegBit -Negates (inverts) the specified bit of the Input/Output component. It is the same as [PutBit(Bit,!GetBit(Bit))
                ]. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "Timer"     (component FreeCntr)
   - Timer_Reset -This method resets the timer-counter (sets to zero for up-counting HW or to appropriate value for 
                down-counting HW). The method is available only if the counter register can be set by software and the counter 
                is not shared.
   - Timer_GetCounterValue -This method returns a content of the counter.

Module "WDog"      (component WatchDog)
   - WDog_Enable -Enables the component - starts the watchdog timer counting.
   - WDog_Disable -Disables the component - stops the watchdog timer counting.
   - WDog_Clear -Clears the watchdog timer (it makes the timer restart from zero).

Module "Cpu"       (component MC9S08PA4_20)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. The method is independent on selected speed mode.

===================================================================================
